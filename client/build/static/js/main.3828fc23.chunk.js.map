{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["client","W3CWebSocket","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onEditorStateChange","text","send","JSON","stringify","type","username","state","userName","content","showLoginSection","react_default","a","createElement","className","build","size","string","name","value","onChange","handleUserNameChange","onClick","logInUser","currentUsers","userActivity","_this2","onopen","console","log","onmessage","message","dataFromServer","parse","data","stateToChange","values","users","editorContent","setState","objectSpread","e","target","trim","map","user","Fragment","id","key","style","backgroundColor","randomcolor","UncontrolledTooltip","placement","react_medium_editor","options","placeholder","activity","index","concat","Navbar","color","light","NavbarBrand","href","showEditorSection","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3828fc23.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport { Identicon } from \"react-identicons\";\r\nimport { Navbar, NavbarBrand, UncontrolledTooltip } from \"reactstrap\";\r\nimport { Editor } from \"react-medium-editor\";\r\nimport \"medium-editor/dist/css/medium-editor.css\";\r\nimport \"medium-editor/dist/css/themes/default.css\";\r\nimport \"./App.css\";\r\n\r\nconst client = new W3CWebSocket(\"ws://127.0.0.1:8000\");\r\nconst contentDefaultMessage = \"Start writing your document here\";\r\n\r\ntype User = {\r\n  userName: string;\r\n  randomcolor: string;\r\n}\r\n\r\nexport interface IAppProps {}\r\n\r\nexport interface IAppState {\r\n  /** List of the current active users */\r\n  readonly currentUsers: User[];\r\n\r\n  /** List of the list of activity notes for the user */\r\n  readonly userActivity: string[];\r\n\r\n  /** username of the current user */\r\n  readonly userName: string;\r\n\r\n  /** Text to be displayed in shared editor */\r\n  readonly text: string;\r\n}\r\n\r\nclass App extends Component<IAppProps, IAppState> {\r\n  constructor(props: IAppProps) {\r\n    super(props);\r\n    this.state = {\r\n      currentUsers: [],\r\n      userActivity: [],\r\n      userName: \"\",\r\n      text: \"\",\r\n    };\r\n  }\r\n\r\n  public logInUser(): void {\r\n    const username = this.state.userName;\r\n    client.send(\r\n      JSON.stringify({\r\n        username,\r\n        type: \"userevent\",\r\n      })\r\n    );    \r\n  }\r\n\r\n  /* When content changes, we send the\r\ncurrent content of the editor to the server. */\r\n  onEditorStateChange = (text: string) => {\r\n    client.send(\r\n      JSON.stringify({\r\n        type: \"contentchange\",\r\n        username: this.state.userName,\r\n        content: text,\r\n      })\r\n    );\r\n  };\r\n\r\n  componentWillMount() {\r\n    client.onopen = () => {\r\n      console.log(\"WebSocket Client Connected\");\r\n    };\r\n    client.onmessage = (message: any) => {\r\n      const dataFromServer = JSON.parse(message.data);\r\n      const stateToChange: any = {};\r\n      if (dataFromServer.type === \"userevent\") {\r\n        stateToChange.currentUsers = Object.values(dataFromServer.data.users);\r\n      } else if (dataFromServer.type === \"contentchange\") {\r\n        stateToChange.text =\r\n          dataFromServer.data.editorContent || contentDefaultMessage;\r\n      }\r\n      stateToChange.userActivity = dataFromServer.data.userActivity;\r\n      this.setState({\r\n        ...stateToChange,\r\n      });\r\n    };\r\n  }\r\n\r\n  showLoginSection = () => (\r\n    <div className=\"account\">\r\n      <div className=\"account__wrapper\">\r\n        <div className=\"account__card\">\r\n          <div className=\"account__profile\">\r\n            <Identicon\r\n              className=\"account__avatar\"\r\n              size={64}\r\n              string=\"randomness\"\r\n            />\r\n            <p className=\"account__name\">Welcome player!</p>\r\n            <p className=\"account__sub\">Enter your name to play</p>\r\n          </div>\r\n          <input\r\n            name=\"username\"\r\n            type=\"text\"\r\n            value={this.state.userName}\r\n            onChange={this.handleUserNameChange}\r\n            className=\"form-control\"\r\n          />\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => this.logInUser()}\r\n            className=\"btn btn-primary account__btn\"\r\n          >\r\n            Join\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  public handleUserNameChange(e: any) {\r\n    let name = e.target.value;\r\n    if (name.trim()) {\r\n    this.setState({userName: name})\r\n    }\r\n  }\r\n\r\n  public showEditorSection(): JSX.Element {\r\n    return (\r\n      <div className=\"main-content\">\r\n        <div className=\"document-holder\">\r\n          <div className=\"currentusers\">\r\n            {this.state.currentUsers.map((user) => (\r\n              <React.Fragment>\r\n                <span\r\n                  id={user.userName}\r\n                  className=\"userInfo\"\r\n                  key={user.userName}\r\n                >\r\n                  <Identicon\r\n                    className=\"account__avatar\"\r\n                    style={{ backgroundColor: user.randomcolor }}\r\n                    size={40}\r\n                    string={user.userName}\r\n                  />\r\n                </span>\r\n                <UncontrolledTooltip placement=\"top\" target={user.userName}>\r\n                  {user.userName}\r\n                </UncontrolledTooltip>\r\n              </React.Fragment>\r\n            ))}\r\n          </div>\r\n          <Editor\r\n            options={{\r\n              placeholder: {\r\n                text: this.state.text ? contentDefaultMessage : \"\",\r\n              },\r\n            }}\r\n            className=\"body-editor\"\r\n            text={this.state.text}\r\n            onChange={this.onEditorStateChange}\r\n          />\r\n        </div>\r\n        <div className=\"history-holder\">\r\n          <ul>\r\n            {this.state.userActivity.map((activity, index) => (\r\n              <li key={`activity-${index}`}>{activity}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { userName } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <Navbar color=\"light\" light>\r\n          <NavbarBrand href=\"/\">\r\n            Poker Client Stage 1: Game Management\r\n          </NavbarBrand>\r\n        </Navbar>\r\n        <div className=\"container-fluid\">\r\n          {userName ? this.showEditorSection() : this.showLoginSection()}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}